VERIFICATIONCODE

package rv;

import java.util.HashMap;

import assertion.Assertion;
import fits.BackEnd;
import fits.BankAccount;
import fits.UserInfo;

import player.Joinpoint;
import player.Joinpoint.JoinpointKind;

public class Verification {
  // P2
	static public boolean fitsHasBeenInitialised;
	// P8
    static public Integer fitsExternalMoneyTransferCount;
	static public Double fitsExternalMoneyTransferAmount;
	
	static public void setupVerification() {
    // P2
		fitsHasBeenInitialised = false;
		// P8
    fitsExternalMoneyTransferCount = 0;
		fitsExternalMoneyTransferAmount = 0.0;
	}	
}

PRELUDE

package rv;

import java.util.HashMap;

import assertion.Assertion;
import fits.BackEnd;
import fits.BankAccount;
import fits.FrontEnd;
import fits.UserInfo;
import fits.UserSession;

RULES

// P2
after BackEnd.initialise(..) | -> 
  { Verification.fitsHasBeenInitialised = true; }
before UserInfo.openSession(..) 
  |  !Verification.fitsHasBeenInitialised 
  -> { Assertion.alert("P2 violated"); }

// P8
before *.USER_payToExternal(Integer uid, Integer sid, String to_account_number, Double amount) | -> { 
  Verification.fitsExternalMoneyTransferCount ++; 
  Verification.fitsExternalMoneyTransferAmount += amount; 
  if (Verification.fitsExternalMoneyTransferCount >= 1000 
    || Verification.fitsExternalMoneyTransferAmount >= 1000000) {
     Assertion.alert("P8 violated");
  }
}

after *.ADMIN_reconcile(..) | -> { 
  Verification.fitsExternalMoneyTransferCount = 0; 
  Verification.fitsExternalMoneyTransferAmount = 0.0; }
