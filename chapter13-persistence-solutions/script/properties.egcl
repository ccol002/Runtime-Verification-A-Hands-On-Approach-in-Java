VERIFICATIONCODE

package rv;

import java.util.HashMap;

import assertion.Assertion;
import fits.BackEnd;
import fits.BankAccount;
import fits.UserInfo;

public class Verification {
	static public Integer fitsExternalMoneyTransferCount;
	static public Double fitsExternalMoneyTransferAmount;
	
	static public void setupVerification() {
		fitsExternalMoneyTransferCount = 0;
		fitsExternalMoneyTransferAmount = 0.0;
	}
	
}

PRELUDE

package rv;

import java.util.HashMap;

import assertion.Assertion;
import fits.BackEnd;
import fits.BankAccount;
import fits.FrontEnd;
import fits.UserInfo;
import fits.UserSession;

RULES

  // P8 
  // The administrator must reconcile accounts every 1000 attempted external money transfers or an 
  // aggregate total of one million dollars in attempted external transfers.

  before *.USER_payToExternal(Integer uid, Integer sid, String to_account_number, Double amount) | -> { 
    Verification.fitsExternalMoneyTransferCount ++; 
    Verification.fitsExternalMoneyTransferAmount += amount; 
    if (Verification.fitsExternalMoneyTransferCount >= 1000 
      || Verification.fitsExternalMoneyTransferAmount >= 1000000) {
      Assertion.alert("P8 violated");
    }
  }

  before TransactionSystem.initialise() | -> {
      MonitoringState ms = new MonitoringState("filename");
      Verification.fitsExternalMoneyTransferCount = 
        (Integer)(ms.restoreValue("fitsExternalMoneyTransferCount", 0));
      Verification.fitsExternalMoneyTransferAmount = 
        (Double)(ms.restoreValue("fitsExternalMoneyTransferAmount", 0.0));
  }

  after TransactionSystem.shutdown() | -> {
      MonitoringState ms = new MonitoringStore();
      ms.saveValue(
        "fitsExternalMoneyTransferCount", 
        Verification.fitsExternalMoneyTransferCount
      );
      ms.saveValue(
        "fitsExternalMoneyTransferAmount", 
        Verification.fitsExternalMoneyTransferAmount
      );
      ms.saveToFile("filename");
  }



}




